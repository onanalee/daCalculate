let sellInvoice = [
    50880,
    22280,
    34482,
    25505,
    90283,
    1047,
    41408,
    25505,
    18230,
    37535,
    3068,
    6496,
    32162,
    444,
    24539,
    50640,
    13848,
    42825,
    9604,
    24883,
    25111,
    17070,
    25746,
    28086,
    35877,
    30564,
    51168,
    9484,
    34986,
    24883,
    39676,
    38593,
    24546,
    6264,
    37559,
    15091,
    17678,
    24883,
    14470,
    24725,
    20924,
    20220,
    24883,
    29491,
    15519,
    28744,
    13249,
    6412,
    15857,
    25920,
    52346,
    679,
    25920,
    26642,
    14759,
    33099,
    50739,
    16016,
    17950,
    16802,
    25920,
    12541,
    9564,
    3285,
    12645,
    31335,
    25920,
    65831,
    22916,
    3136,
    7862,
    2940,
    20500,
    4682,
    10082,
    18525,
    45825,
    25920,
    84855,
    16231,
    1472,
    19509,
    25920,
    693,
    25920,
    16752,
    64212,
    1188,
    74409,
    12881,
    25920,
    19375,
    537,
    25920,
    10821,
    43476,
    16746,
    76898,
];


let buyInvoice = [
    30742,
    11931,
    15110.5,
    14863.32,
    55999.69,
    660.15,
    24903.92,
    14863.32,
    11632.72,
    16417,
    2050.64,
    4338.52,
    20567.13,
    252,
    15964.18,
    30970,
    8703.84,
    19292,
    6427.96,
    14500.8,
    15711.53,
    10534.15,
    15784.92,
    18035.54,
    16002.4,
    18531.83,
    30468.4,
    6311.56,
    22694.95,
    14500.8,
    25332.63,
    25580.68,
    10737.2,
    4170.48,
    22338.11,
    9737.24,
    11536.84,
    14500.8,
    8112.02,
    10624,
    15413.47,
    13571.88,
    14500.8,
    21874.08,
    14958.87,
    14913,
    10640.16,
    4284.52,
    8524.2,
    18126,
    36438.85,
    513.45,
    18126,
    20248.75,
    11171.8,
    17558.4,
    36053.35,
    10712.48,
    13228.37,
    8974,
    18126,
    8071.53,
    6389.16,
    2111.95,
    9848.73,
    16596.4,
    18126,
    48106.96,
    12124,
    2630.4,
    5263.22,
    2376,
    14353.47,
    3282.75,
    7431.4,
    14216.99,
    24137.4,
    18126,
    64014.16,
    11733.33,
    1032.24,
    13905.15,
    18126,
    410.55,
    18126,
    12317.48,
    33983.45,
    703.8,
    55504.27,
    8676.47,
    18126,
    13336.37,
    263.38,
    18126,
    6801.23,
    23389,
    11196.63,
    55701
];


let sellErp = [
    16746,
    76898,
    43477,
    25920,
    10821,
    19376,
    25920,
    538,
    12881,
    1188,
    74410,
    64213,
    25920,
    16752,
    693,
    19509,
    1742,
    25920,
    16232,
    84855,
    25920,
    18525,
    10083,
    4682,
    45825,
    20500,
    2940,
    7862,
    3136,
    25920,
    22916,
    65831,
    31335,
    12645,
    3285,
    25920,
    12541,
    9564,
    17950,
    16802,
    16016,
    50740,
    33100,
    14759,
    26642,
    679,
    25920,
    52346,
    6412,
    25920,
    15858,
    13250,
    19519,
    28744,
    20736,
    29491,
    20220,
    20924,
    24883,
    14471,
    24725,
    17678,
    15091,
    6264,
    37559,
    24354,
    38593,
    64559,
    34987,
    9484,
    51168,
    30564,
    35493,
    28087,
    25747,
    17071,
    9604,
    49995,
    42276,
    13848,
    50640,
    24984,
    6496,
    32162,
    3068,
    37535,
    43735,
    42456,
    115788,
    34482,
    50880,
    22281,
]
const intersection = sellInvoice.filter(element => sellErp.includes(element));

console.log(intersection);

// function getMatch(a, b) {
//     let mismatch = [];
//     for (let i = 0; i < a.length; i++) {
//         for (let e = 0; e < b.length; e++) {
//             if (a[i] !== b[e]) mismatch.push(a[i]);
//         }
//     }
//     console.log(mismatch);
// }
//
// getMatch(sellInvoice, sellErp);